#!/usr/bin/perl -w
#this script limits the scan results of a qualys file
use strict;
use warnings;
use Getopt::Long;
use List::Util qw(shuffle);


my @lines;
my $currentPos;
#Get Arguments
my %args;
GetOptions(\%args,
           "f=s",
           "o=s",
) or die "Invalid arguments!";
die "Missing Scan File -f!" unless $args{f};
die "Missing Out File -o!" unless $args{o};


#open the file for processing
my $scan_fh;
my $out_fh;
open($scan_fh, "<$args{f}");
$args{o} =~ s/\\/\\\\/g;
open($out_fh, ">$args{o}");


my $host = "0";
my $switch = "0";
my $audit = "0";

while (<$scan_fh>) 
{
	
	my($line) = $_;
	chomp($line);
	
	if ($line =~ /<host>/i) {
		$host = "1";
		#print $line . "\n";
		#$line = &scrubData($line);
		#processHost($line);
		#next;
	} 
	
	if ($line =~ /<audit>/i) {
		processHost($line);
		$audit = "1";
		next;
	}

	if ($line =~ /<os>/i && $host == "1" ) {
		if ($line =~ /Linux/i) {
			processHost($line);
			#dumpArray();
			$switch = "1";
		} 
		next;
		
	}
	
	if ($line =~ /<\/host>/i && $host == "1" && $switch == "1") {
		dumpArray();
		printObject ($line . "\n");
		$host = "0";
		$switch  = "0";
		undef @lines;
		next;

	
	} else {
		if ($host == "1" && $line =~ /<\/host>/i) {
			$host = "0";
			$switch = "0";
			undef @lines;
			next;
		}
	
	}
	
	if ($line =~ /<\/audit>/i) {
		$audit = "0";
	}
	if ($host eq "1") {
		if ($line =~ /<rthID>/i && $audit == "1") {
		processHost($line);
		next;
		}
		if ($line =~ /<context>/i && $audit == "1") {
		processHost($line);
		next;
		}
		if ($line =~ /<cvssScore>/i && $audit == "1") {
		processHost($line);
		next;
		}
		if ($line =~ /<cve>/i && $audit == "1") {
		processHost($line);
		next;
		}
		if ($line =~ /<name>/i && $audit == "1") {
		processHost($line);
		next;
		}
		if ($audit != "1") {
		processHost($line);
		}
	}
	
	if ($host ne "1") {
		printObject ($line . "\n");
	}
	



	#printObject ($line . "\n");
	
	#$line =~ s/\r/\n/g;
	#printObject ($line . "\n");
	#if ($line =~ "</IP") {
	#	exit;
	#}


}

sub processHost {
	
	my ($object) = @_;
	$object = $object . "\n";
	push (@lines, $object);

}

sub scrubData {

	my($line) = @_;
	my ($ip) = $line =~ /value="(.*?)"/;
	my ($dns) = $line =~ /name="(.*?)"/;
	my ($status) = $line =~ /status="(.*?)"/;
	my @ips = split /\./, $ip;
	my @shf = shuffle(@ips);
	my $ele_attr;
    $ip = join ('.', @shf);
	$ele_attr = '<IP value="' . $ip . '" ';
	if (length($dns)) {
	    my @dns = split //, $dns;
		my @dns_shf = shuffle(@dns);
		$dns = join ('', @dns_shf);
		$ele_attr = $ele_attr . 'name="' . $dns . '" ';
	}
	if (length($status)) {
		$ele_attr = $ele_attr . 'status="' . $status . '"';
	}
	
	$ele_attr = $ele_attr . '>';
	return $ele_attr;
	
}
	
sub printObject {

	my($object) = @_;
	print $out_fh $object;



}

sub dumpArray {
	print $out_fh @lines;
}


close($scan_fh);

close($out_fh);
